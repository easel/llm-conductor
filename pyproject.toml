[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[project]
name = "llm-conductor"
dynamic = ["version"]
description = "Unified LLM provider orchestration with batch processing and streaming"
readme = "README.md"
requires-python = "~=3.12.0"
license = {text = "Apache-2.0"}
authors = [
    {name = "HarmonyCares CHA Platform Team", email = "cha-platform@harmonycares.com"},
]
keywords = ["llm", "ai", "openai", "claude", "litellm", "batch-processing"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "litellm>=1.77.5",
    "click>=8.1.0",
    "json-repair>=0.25.0",
    "tiktoken>=0.8.0",
]

[project.optional-dependencies]
observability = [
    "traceloop-sdk>=0.30.0",
    "opentelemetry-api>=1.24.0",
    "opentelemetry-sdk>=1.24.0",
    "opentelemetry-exporter-otlp>=1.24.0",
    "mlflow>=2.17.0",
]

[project.scripts]
llm-conductor = "llm_conductor.cli:main"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
fallback-version = "0.0.0"

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-cov>=6.0.0",
    "anyio>=4.0.0",
    "pytest-mock>=3.15.1",
    "ruff>=0.8.0",
    "pre-commit>=4.0.0",
]

[tool.uv]
package = true

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests (may require external services)",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/llm_conductor"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TID", # flake8-tidy-imports
]
ignore = [
    "E501",  # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",  # Unused function arguments in tests
]

[tool.ruff.lint.isort]
known-first-party = ["llm_conductor"]
